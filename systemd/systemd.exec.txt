systemd.exec						systemd 228
	http://www.freedesktop.org/software/systemd/man/systemd.exec.html
用途
	service.service, socket.socket, mount.mount, swap.swap
描述
	该单元配置文件配置services, sockets, mount points, and swap devices，定义在执行spawned进程的执行环境。
	配置这些选项在[Service], [Socket], [Mount], or [Swap] sections里
自动依赖
	一些执行参数会造成，附加和自动依赖被添加
	WorkingDirectory= 或 RootDirectory= 自动设置依赖Requires= and After=类型在所有mount unit用来访问指定目录，等于明确设置列表在RequiresMountsFor=
	PrivateTmp=选项自动获取所有的mounts挂载单元依赖，用来访问/tmp和/var/tmp
	Unit里他的标准输出和错误输出连接到任何其他水池除了null，tty和socket，自动获得依赖After=journald.socket
WorkingDirectory=
	设置为绝对位置或"~"，设置执行进程的工作目录。如果设置为"~"，使用User=设置用户的家目录，如果没有设置，则默认为root根目录，当systemd运行为系统实例，当运行为用户模式，则为该用户的家目录。如果设置的前缀为"-"字符，错误的工作目录不认为是fatal致命。

RootDirectory=
	设置为一个绝对路径，用来设置执行进程的根目录，使用chroot来调用。如果使用应该确保所有需要的二进制文件和辅助文件都应该在chroot的监狱里。

User=, Group=
	设置进程的执行用户和组，可以设置为用户名组名或uid gid，没有设置组，则默认为用户的组

SupplementaryGroups=
	设置进程执行的附加组，这个可以是空格分隔的组名或id列表。这个选项可以执行多次，所有的列出的组都作为附加组，如果设置为空字符串，所有附加组列表被重置和优先级无效。无论如何，这个选项不能被覆盖，而且添加了用户在/etc/group里的附加组
	
Nice=
	设置默认的nice级别，可以设置 -20 (highest priority) and 19 (lowest priority)

OOMScoreAdjust=
	设置调整级别oom时kill执行进程，可以设置 -1000 (to disable OOM killing for this process)不 kill 到 1000 (to make killing of this process under memory pressure very likely)最先kill

IOSchedulingClass=
	设置io调度类，可以设置0到3或none, realtime, best-effort or idle

IOSchedulingPriority=
	设置io调度优先级，可以设置0 (highest priority) and 7 (lowest priority)，可用的优先级依赖于io调度类
CPUSchedulingPolicy=
	设置执行进程的cpu调度策略，可以设置为other, batch, idle, fifo or rr
CPUSchedulingPriority=
	设置cpu调度优先级，可用的优先级范围根据cpu的调度策略。实时优先级调度策略优先级范围为 1 (lowest priority) 到 99 (highest priority)
CPUSchedulingResetOnFork=
	设置一个布尔值，如果为true，在执行fork的进程时，升高cpu调度优先级和策略会被重置，因此父进程的优先级不会泄漏给子进程。默认为false
CPUAffinity=
	控制进程和cpu的亲和度，设置一个cpu指数或者范围列表由空格或逗号分隔，cpu范围用小写或大写cpu指数用破折号分隔指定(还没找到例子，可能是16进制)，这个选项可以指定多次，这会使cpu亲和力掩码整合。如果设置为空字符串，则掩码被重置，所有分配的优先级没有效果。
	http://man7.org/linux/man-pages/man7/cpuset.7.html
UMask=
	控制创建文件权限的掩码，可以设置为十进制符号访问模式
Environment=
	设置执行进程的环境变量，可以设置空格分隔的变量列表。这个选项可以指定多次，则设置所有列出的变量都会被设置。如果相同的变量被设置为两次，则最后设置会覆盖先前的设置。如果设置为空字符串，则环境变量列表被reset，所有分配的优先级都会变无效。变量扩展在字符串里不会执行，无论如何特殊的扩展是有可能的。$字符没有特殊意义，当设置一个变量的值里包含了空格，则可以使用双引号来括起来。
	Environment="VAR1=word1 word2" VAR2=word3 "VAR3=$word 5 6"

EnvironmentFile=
	类似Environment=但是读取环境变量从一个text文件中。这个文本文件必须包含由换行符分隔的变量分配。空行和没有=号分隔的行或由;或#开头行将会被忽略，这些可能被用来做注释。行以反斜杠结尾将会包含下一行，允许多行来定义变量。解析器会在变量分配里删除开头和结尾的空白，除非使用双引号。
	这个选项值必须是绝对文件名或通配符表达式，以"-"开头，意味者如果这个文件不存在，它不会被读取和不记录错误或警告信息。这个选项可以指定多次，则所有的指定文件都会被读取。如果这个选项设置为空字符串，则读取的文件列表会被重置，所有分配的优先级都无效。
	这个指令列出来的文件在进程执行前被短暂读取。(你可以产生这个文件在一个unit state，在下一个unit state读取这个选项指定的文件)
	这些文件的设置覆盖 Environment=产生的配置。如果相同的变量从这些文件中设置两次，这些文件会按照指定的顺序读取和最后的变量设置覆盖前面设置。

PassEnvironment=
	传递环境变量从systemd管理系统到被执行到的进程。可以设置为空格分隔的变量名列表。这个选项可以指定多次，则所有列出变量将会被设置。如果这个选项设置为空字符串，则环境变量列表会被重置，所有分配优先级都没有效果。如果这个选项指定的变量没有在systemd管理器里设置，则不会传递到进程，且会被静默忽略。
	这个选项设置的变量传递，会覆盖 Environment= or EnvironmentFile=传递的
	
	Example:

	PassEnvironment=VAR1 VAR2 VAR3
	传递三个变量"VAR1", "VAR2", "VAR3"和相应值到PID1
	
StandardInput=
	控制执行进程的文件描述符0连接到那里。可以设置为null, tty, tty-force, tty-fail or socket.
	如果选择为null，标准输入将会连接到/dev/null,比如所有进程读取尝试都会立即EOF(结束)。
	如果设置为tty，标准输入连接到一个TTY(由TTYPath=设置)且执行进程变成终端的控制进程。如果终端已经被其他进程控制，则执行进程等待直到当前终端的控制进程释放终端。
	tty-force类似tty，但是执行进程是强制并立即为该终端的控制进程，潜在移除先前终端的控制进程。
	tty-fail类似tty，但是在进程启动时终端已经有控制进程，则进程执行失败。
	socket选项只在激活socket的服务中有效，且只有当socket配置文件(详细信息在systemd.socket(5))指定一个单一的socket时。如果这个选项设置了，则标准输出将会被连接到服务激活的socket，这个主要用来兼容使用传统 inetd(8)设计的守护进程。
	这个设置默认为null。
	
StandardOutput=
	控制执行进程的文件描述符1连接到那。可以设置为 inherit, null, tty, journal, syslog, kmsg, journal+console, syslog+console, kmsg+console or socket其中之一.
	inherit重复标准输入的文件描述符到标准输出。
	null连接标准输出到/dev/null,比如往它里面写入任何动作都会丢失。
	tty连接标准输出到一个tty(通过TTYPath=设置)。如果这个tty只用来输出。则执行进程不会变成该终端的控制进程，且不会失败或不会等待其他进程释放该终端。
	journal连接标准输出到journal通过journalctl(1)来访问journal。注意任何东西写入到syslog or kmsg会隐式存入journal。下面两个列出的选项是这个选项的扩展集。
	syslog连接标准输出到系统 syslog(3)服务，除了journal之外。注意这个journal守护进程通常配置为转发所有接收到syslog，在这种情况下这个选项与journal没有不同。
	kmsg连接标准输出到内核日志buffer，可以通过dmesg(1)来访问，除了journal之外。journal守护进程可能被配置问发送所有日志到kmsg，在这种情况下与journal选项没有不同。
	journal+console, syslog+console and kmsg+console分别类似于上面三个选项但是同样复制输出到系统console。
	socket连接标准输出一个socket激活的socket。语义上类似与StandardInput=选项里的socket选项一样。
	这个选项的默认值设置在 systemd-system.conf(5)里的DefaultStandardOutput=选项，它的默认值为journal。注意设置这个参数可能造成额外的依赖被增加到unit里。
	
StandardError=
	控制执行进程的文件描述符1连接到那。可用的选项与StandardOutput=一样，除了一个:如果设置为inherit，则标准输出的文件描述符重复到标准错误。这个设置默认值设置在systemd-system.conf(5)里的DefaultStandardError=。它的默认值为inherit。注意设置这个参数可能造成额外的依赖被增加到unit里。
	
TTYPath=
	设置用来标准输入，输出，或错误连接到TTY时的终端设备节点。默认为/dev/console.

TTYReset=
	重置TTYPath=指定的终端设备在执行前和执行后。默认为"no".
	
TTYVHangup=
	在执行前和执行后断开所有打开TTYPath=指定的终端设备的客户端。默认为"no".
	
TTYVTDisallocate=
	如果TTYPath=指定的终端设备是一个虚拟console终端，则尝试解除分配TTY在执行前和执行后。这个确保屏幕和scrollback是干净的。默认为"no".
	
SyslogIdentifier=
	设置发送到日志系统或内核日志buffer的日志行进程前缀。如果没有设置，默认为执行进程的进程名。这个选项只用于StandardOutput= or StandardError= 设置为syslog, journal or kmsg(或相同的选项加上+console)。

SyslogFacility=
	设置当记录到syslog时系统的facility。可以设置为kern, user, mail, daemon, auth, syslog, lpr, news, uucp, cron, authpriv, ftp, local0, local1, local2, local3, local4, local5, local6 or local7.更多详细信息在 syslog(3)。这个选项只用于StandardOutput= or StandardError= 设置为syslog。默认为daemon.

SyslogLevel=
	设置记录到syslog或内核日志buffer的默认syslog级别。可以设置为 emerg, alert, crit, err, warning, notice, info, debug其中之一.更多详细信息在 syslog(3)。这个选项只用于StandardOutput= or StandardError= 设置为syslog或kmsg。注意守护进程的每一行输出前缀可能设置了不同的日志级别，用来覆盖这个选项指定的默认日志级别。解析这些前缀可能会被SyslogLevelPrefix=设置所禁用。更多详细信息在sd-daemon(3)。默认为info。

SyslogLevelPrefix=
	设置为布尔值参数。如果设置为true且StandardOutput= or StandardError=设置为syslog, kmsg or journal,则执行进程写入的日志行的日志级别前缀会传递到syslog中的相应的日志级别设置但前缀会被删除。如果设置为false，则解析这些前缀会被禁用且日志行被传递到as-is。更多详细关于前缀在 sd-daemon(3)。默认为true。

TimerSlackNSec=
	设置执行进程的时间计数器为纳秒级。这个时间计数器控制被定时器触发的唤醒精度，更多详细信息在prctl(2)。注意为了对照其他时间范围清晰度当没有指定单位，这个参数设置为整数个纳秒。常用的时间单位你懂得。
	
LimitCPU=, LimitFSIZE=, LimitDATA=, LimitSTACK=, LimitCORE=, LimitRSS=, LimitNOFILE=, LimitAS=, LimitNPROC=, LimitMEMLOCK=, LimitLOCKS=, LimitSIGPENDING=, LimitMSGQUEUE=, LimitNICE=, LimitRTPRIO=, LimitRTTIME=
	这些设置执行进程的各种资源软和硬限制。更多详细信息在setrlimit(2)。使用infinity字符串意味这指定资源无限制。多倍后缀 K (=1024), M (=1024*1024) G, T, P and E 等等可能被用来限制资源粒度为字节。(比如 LimitAS=16G)。对于时间限制，常用的时间单位为ms, s, min, h等等(更多详细信息在systemd.time(7))。注意在 LimitCPU=里没有指定时间单位则默认使用秒做单位。而LimitRTTIME=默认单位为毫秒。同样注意限制的有效粒度可能会影响他们执行。比如，LimitCPU=时间限制将会以1s为基准舍去。
	注意大部分执行资源限制选项都是针对每个进程，且进程可能是fork，为 了获得新的资源设置，这些资源数量独立于原始进程，且可能因此逃逸限制设置。同样注意LimitRSS=不会应用在linux，且对它进行设置没有效果。通常明智的更好的资源控制列在systemd.resource-control(5)中对应这些每个进程限制，它们把一个服务当做一个整体，可以在运行时动态修改，且产生更昂贵的开销。比如MemoryLimit= 替换LimitRSS=非常有用。

	Table 1. Limit directives and their equivalent with ulimit

	Directive	ulimit equivalent	Unit
	LimitCPU=	ulimit -t	Seconds
	LimitFSIZE=	ulimit -f	Bytes
	LimitDATA=	ulimit -d	Bytes
	LimitSTACK=	ulimit -s	Bytes
	LimitCORE=	ulimit -c	Bytes
	LimitRSS=	ulimit -m	Bytes
	LimitNOFILE=	ulimit -n	Number of File Descriptors
	LimitAS=	ulimit -v	Bytes
	LimitNPROC=	ulimit -u	Number of Processes
	LimitMEMLOCK=	ulimit -l	Bytes
	LimitLOCKS=	ulimit -x	Number of Locks
	LimitSIGPENDING=	ulimit -i	Number of Queued Signals
	LimitMSGQUEUE=	ulimit -q	Bytes
	LimitNICE=	ulimit -e	Nice Level
	LimitRTPRIO=	ulimit -r	Realtime Priority
	LimitRTTIME=	No equivalent	Microseconds

PAMName=
	设置session的PAM服务名。如果该选项设置，则执行进程将会在指定的服务名下注册一个PAM session。这个只用于和User=选项一起使用。如果未设置，执行进程不会打开PAM session。更多信息在pam(8)。

CapabilityBoundingSet=
	设置执行进程的那些capabilities包含在capability边界设置。更多信息在capabilities(7)。可以设置为一个空白分隔的capability名字列表，这些名字通过cap_from_name(3)来读取。比如CAP_SYS_ADMIN, CAP_DAC_OVERRIDE, CAP_SYS_PTRACE。被列出的capabilities会包含在边界设置，其他所有将会被移除。如果capabilities列表是一个前缀为"~"，除了列出的capabilities以外的其他都会被包含，实际上分配值被反义。注意这些选项同样在Capabilities=设置顶端影响各个capabilities在effective(实际的), permitted(允许的) and inheritable(可继承的) capability设置。如果这个选项没有使用，则执行进程的capability边界设置不会被修改，因此在进程执行时没有capabilities限制。这个选项可以使用多次，在这种情况下边界设置会聚合。如果这个选项设置为空的字符串，则边界设置重置为空的capability集，且所有优先级设置都无效。如果设置为"~"(没有更多的其他参数)，则边界设置重置为全部可用的capabilities集合，同样取消先前的设置。

SecureBits=
	控制执行进程的安全位设置。可以设置为空格分隔的混合选项，从这些列表里:keep-caps, keep-caps-locked, no-setuid-fixup, no-setuid-fixup-locked, noroot, and noroot-locked.这个选项可以多次设置，在这种情况下安全位进行或计算。如果这个选项设置为空字符串。则位会被重置为0。更多详细信息在capabilities(7)。

Capabilities=
	控制执行进程的capabilities设置。可以设置为在 cap_from_text(3)里描述为effective, permitted and inherited 的capability字符串。注意这些capability通常设置影响(和过滤)执行文件附加的capabilities。CapabilityBoundingSet=可能是一个非常有用的设置。

ReadWriteDirectories=, ReadOnlyDirectories=, InaccessibleDirectories=
	设置执行进程的新文件系统namespace。这些选项用在在主文件系统层面限制一个进程访问。每个设置包含一个空格分隔的绝对目录列表。在ReadWriteDirectories=列出的目录namespace访问性与外部访问权利一样。在ReadOnlyDirectories=列出的目录，只能只读访问，写入将会被拒绝，甚至常用的文件访问控制允许的也会被拒绝。在InaccessibleDirectories=列出的目录在进程里的namespace会设置为不可访问。注意这些选项的访问限制不会扩展到新创建目录的子挂载(先创建目录然后在挂载)。这个选项可以多次设置，在这种情况下所有列出的目录，都会在namespace里限制访问。如果这个选项设置为空字符串，则重置指定的列表，且所有分配的优先级都无效。
	在ReadOnlyDirectories= and InaccessibleDirectories=里的路径可以前缀为"-"，这种情况下，它们将会忽略不存在的路径。注意使用这个选项将会断开propagation(传播)主机服务的(mounts)挂载(propagation在相反指令继续工作)。这意味这些设置不能用一些服务，这些服务在必须安装挂载点在主挂载namespace上。

PrivateTmp=
	设置一个布尔值。如果设置为true，则执行进程里新设置一个文件系统namespace且在这个namespace里挂载 /tmp and /var/tmp目录为私有的，这个让namespace外部进程不能共享该目录。这个用来进程安全的访问临时文件，但是不可能产生进程通过 /tmp and /var/tmp来共享。如果这个启用，一个服务创建所有的临时文件将会在服务停止后被移除。默认为false。有可能两个unit或更多个unit有相同私有/tmp and /var/tmp的namespace，通过使用JoinsNamespaceOf=指令，更多详细信息在systemd.unit(5)。注意使用这个选项将会断开propagation(传播)主机服务的(mounts)挂载(propagation在相反指令继续工作)。这意味这些设置不能用一些服务，这些服务在必须安装挂载点在主挂载namespace上。

PrivateDevices=
	设置一个布尔值。如果设置为true，则在执行进程里设置一个新的/dev namespace和增加一个虚拟设备的API比如/dev/null, /dev/zero or /dev/random(就像虚拟TTY子系统)，而不是物理设备比如/dev/sda。这个用来安全关闭执行进程访问的物理设备。默认为false。启用这个选项同样会移除CAP_MKNOD从capability边界设置，且设置DevicePolicy=closed(更多详细内容在systemd.resource-control(5))。注意使用这个选项将会断开propagation(传播)主机服务的(mounts)挂载(propagation在相反指令继续工作)。这意味这些设置不能用一些服务，这些服务在必须安装挂载点在主挂载namespace上。

PrivateNetwork=
	设置一个布尔值，如果为true，则在执行进程里设置一个新的网络namespace且在namespace里只有本地回环设备"lo"。其他网络设备对于执行进程都不可用。这个用来安全关闭执行进程的网络访问。默认为false。有可能两个unit或更多个unit有相同私有网络namespace，通过使用JoinsNamespaceOf=指令，更多信息在systemd.unit(5)。注意这个选项将会断开主机所有的socket families，这个包括AF_NETLINK and AF_UNIX。后面这个会造成在抽象的socket namespace的AF_UNIX socket对进程不可用(无论如何，这些在本地文件系统可以继续访问)。

ProtectSystem=
	设置一个布尔值或"full".如果为true，则挂载 /usr and /boot目录对于改进程只读。如果设置为"full"，则/etc目录也会挂载为只读。这个设置确保这个服务禁止修改提供商的操作系统(原始操作系统)。推荐启用这个选项在长时间运行的服务里，除非需要系统更新或需要其他方法修改操作系统。注意这个进程保留有CAP_SYS_ADMIN capability能够取消这个设置。这个设置对于移除了这个能力(capability)的守护进程来说非常有用，比如与CapabilityBoundingSet=一起用.默认为false。

ProtectHome=
	设置一个布尔值或"read-only".如果为true，对于该进程来说，/home, /root and /run/user会产生为不可访问且为空。如果设置为"read-only"，则这三个目录会产生只读。推荐启用这些选项在所有长时间运行的服务(特别是网络面)，来确保它们不能访问用户的私有数据，除非服务实际需要访问用户私有数据。注意无论如何该进程保留有CAP_SYS_ADMIN capability能够取消该这个设置。这个设置对于移除了这个能力(capability)的守护进程来说非常有用，比如与CapabilityBoundingSet=一起用.默认为false。

MountFlags=
	设置一个挂载propagation(传递)flag:shared, slave or private,这个控制该进程的文件系统namespace的mount是否接收或propagation mount或umount动作。更多详细信息在mount(2)。默认为shared。使用shared来确保 mounts and unmounts动作从主机传递到container，反之亦然。使用slave来执行进程，则mounts and unmounts 不会传递到主机。使用private同样确保mounts and unmounts不会从主机传递到该进程的namespace。注意这个slave意味着，在主机中挂载的文件系统依然继续挂载在该进程的namespace中，因此该设备保持busy。注意文件系统namespace相关选项(PrivateTmp=, PrivateDevices=, ProtectSystem=, ProtectHome=, ReadOnlyDirectories=, InaccessibleDirectories= and ReadWriteDirectories=)要求禁止mount and unmount从该单元的文件系统namespace传播出去，且因此shared会降级到slave。
	
UtmpIdentifier=
	在 utmp(5) and wtmp实例中设置该服务的四个验证字符。这个只设置在该服务部署了getty(比如agetty(8))， utmp/wtmp实例必须被创建且清理在执行前和执行后，或者该服务被getty进程所执行。如果配置的字符串超过4个，他会被切掉和最后4个字符会被使用。这个设置能够解析和替换%I风格字符串。这个选项默认无设置，比如没有该服务的utmp/wtmp实例被创建或清理。

UtmpMode=
	可以设置为"init", "login" or "user"其中之一.如果设置了UtmpIdentifier=，则控制该服务的哪种utmp(5)/wtmp实例被生成。这个设置没有效果除非UtmpIdentifier=也设置了。如果设置为init，则只产生INIT_PROCESS实例且调用进程必须部署一个getty兼容的utmp/wtmp逻辑。如果设置为"login"，则第一个INIT_PROCESS实例和随后的LOGIN_PROCESS实例将会生成。在这种情况下，调用进程必须部署为login兼容的utmp/wtmp逻辑。如果设置为"user"，则第一个INIT_PROCESS实例，接着LOGIN_PROCESS实例和最后的USER_PROCESS将会生成。在这种情况下，调用进程可以是任何运行为session leader的进程。默认为"init".

SELinuxContext=
	设置执行进程的SELinux上下文。如果设置，这个将会覆盖自动域名过渡。无论如何这个策略需要授权过渡。这个指令在SELinux禁用时忽略。如果前缀为"-",则所有错误将会被忽略。更多详细信息在setexeccon(3)。

AppArmorProfile=
	设置一个profile名。这个该单元执行的进程启动时将会切换到这个profile。profile必须已经加载到内核，或者这个单元将失败。在AppArmor没有启用时不会进行操作。如果前缀是"-"，所有错误将会被忽略。

SmackProcessLabel=
	设置一个SMACK64安全标签。这个单元的执行进程将会启动在这个标签下且SMACK将会基于它来决定该进程是否允许运行。这个进程将会在这个指定的标签下运行，除非执行文件拥有自己的SMACK64EXEC标签，在这种情况下进程将会过渡到运行在这个标签下。当这个选项没有指定，则使用systemd运行的标签。这个指令会忽略SMACK被禁用。
	这个值可以是前缀"-"，这种情况下将会忽略所有错误。指定为空值，则重置先前的设置。

IgnoreSIGPIPE=
	设置一个布尔值参数。如果为true，会造成SIGPIPE信号会被执行进程忽略。默认为true，因为SIGPIPE通常用在shell管道上。

NoNewPrivileges=
	设置一个布尔值参数。如果为true，确保该服务的进程和它的子进程不能增加新的权限。这个选项比设置安全位更有用，它同样禁止任何形式的UID改变。这个是非常简单，非常有效的方法确保这个进程和它的子进程不会被提升权限。

SystemCallFilter=
	设置一个空格分隔的系统调用名列表。如果使用这个选项，所有该单元进程执行该列表指望的系统调用，进程将会立即终止于SIGSYS信号(白名单)。如果列表的第一个字符是"~"，则对实际进行反义:只有列出的系统调用才会立即执行终止(黑名单)。如果systemd运行在系统模式且这个选项被使用，则 NoNewPrivileges=yes会被应用。这个功能利用Secure Computing Mode 2的内核接口(seccomp filtering)且用来执行一个最小沙盒环境。注意execve, rt_sigreturn, sigreturn, exit_group, exit这些系统调用隐式的在白名单中且不需要明确的列出来。这个选项可以设置多次，在这种情况下过滤名单将会聚合。如果设置空字符串，则重置所有的过滤器，所有分配的优先级都无效。
	如果同时设置了这个选项的两个类型(白名单和黑名单)，则第一个遇到的优先考虑并决定默认的动作(终止或通过这个系统调用)。然后下一个遇到的这个选项加入或删除系统调用从过滤系统调用设置，依赖于它的类型或默认的动作。(比如，当你开始是一个白名单包含read和write，且之后增加一个黑名单包含write，则write将会从设置里被移除。)

SystemCallErrorNumber=
	设置当系统调用过滤设置(SystemCallFilter=)被触发时返回的一个"errno" 的错误的数字名，代替立即终止该进程。可以设置的错误名为 EPERM, EACCES or EUCLEAN。当这个设置没有被使用，或设置一个空字符串，则在过滤触发时该进程立即终止。

SystemCallArchitectures=
	设置包含在系统调用过滤器里的一个空格分隔的架构标识列表。已知的架构标识为x86, x86-64, x32, arm，特殊的标识native.只有指定架构的系统调用才运行执行这个单元。这是一个有效的方法禁用非本地架构的进程compatibility，比如禁止执行32位x86二进制文件在64位x86-64系统。native的标识隐式的映射为本地系统架构(或者更严格:系统管理器编译时的架构)。如果systemd运行在用户模式且这个选项启用，则NoNewPrivileges=yes被应用。注意设置这个选项为非空的列表，则native会被包含在里面。默认这个选项设置为一个空的列表，比如没有架构的系统调用过滤会被应用。

RestrictAddressFamilies=
	限制socket地址家庭来访问该进程。可以设置为一个空格分隔的地址家庭名列表，比如AF_UNIX, AF_INET or AF_INET6.当地址家庭名列表前缀为"~"，则会被应用到黑名单，否则为白名单。注意这个只限制系统调用访问socket(2)。通过其他方法把socket传递到进程(比如，在socket unit里使用socket激活，更多信息在systemd.socket(5))不受影响。同样通过socketpair()创建的socket(只创建连接到AF_UNIX sockets)也不受影响。注意这个选项在32位x86里无效且被忽略(但在x86-64正常工作)。如果systemd运行在用户模式且这个选项启用，则NoNewPrivileges=yes被应用。默认没有限制，所有所有地址家庭都可以访问到进程。如果设置为空字符串，则撤销先前列出的改变。
	使用这个选项来限制远程系统访问该进程，特别通过exotic网络协议。注意在大部分情况下，本地AF_UNIX地址家庭必须包含在白名单配置里，由于它被频繁用来本地通信，包括syslog(2)记录.

Personality=
	控制在该单元进程调用uname(2)时那个内核架构应该被报告。可以设置为 x86 and x86-64其中之一。这个用在32位服务运行在64位主机系统里。如果没有指定，则personality(个性化)保留因此反映个性化的主机系统内核。

RuntimeDirectory=, RuntimeDirectoryMode=
	设置一个目录列表，如果设置了，一个或多个指定的目录将会在该unit启动时被创建在/run(对于系统服务)或在 $XDG_RUNTIME_DIR(对于用户模式)，且在停止时被删除。可以通过RuntimeDirectoryMode=指定这个目录访问模式，且拥有者分别是User= and Group=指定的用户和组。使用这个管理一个或多个该unit的运行时目录且绑定它们的生存时间到守护进程运行时间。指定目录的名称必须是相对的，且不能包含"/",比如必须关于简单目录用来创建和移除。这个对于没有特权的守护进程特别有用，它们不能在/run创建运行时目录由于缺乏权限，且确保运行时目录在使用后被自动清理。对于需要更复杂或不同配置或生存时间保障的运行时目录，请使用tmpfiles.d(5)。

Environment variables in spawned processes(环境变量在衍生的进程)
	被系统启动的进程执行在一个干净的环境里，它会选择下面列出的变量设置。被systemd启动的系统进程不会从PID 1继承变量，但是被用户模式的systemd启动的进程会从systemd里继承所有环境变量。

$PATH
	冒号分隔的目录列表用来启动可执行文件，用户模式的systemd固定值为 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin.
$LANG
	语言环境。能被设置在 locale.conf(5)或在内核命令行(更详细描述在systemd(1) and kernel-command-line(7))
$USER, $LOGNAME, $HOME, $SHELL
	用户名(两次)，家目录，和登陆shell。这个变量通过User= 来设置，同样包括在用户的systemd实例。请看passwd(5).
$XDG_RUNTIME_DIR
	volatile(易变化)状态的目录。对用户systemd实例进行设置，且同样在用户会话里。请看pam_systemd(8).
$XDG_SESSION_ID, $XDG_SEAT, $XDG_VTNR
	会话标识，seat(座位)名，和会话的虚拟终端。通过 pam_systemd(8)来设置登陆会话。 $XDG_SEAT and $XDG_VTNR只在附加在一个seat或一个tty时才设置。
$MAINPID
	该单元的主进程PID，当它是已知的。这个只对ExecReload=调用的控制进程进行设置。
$MANAGERPID
	用户systemd实例的PID，对它衍生的进程进行设置。
$LISTEN_FDS, $LISTEN_PID
	传递到socket激活的服务的文件描述符信息。请看 sd_listen_fds(3).
$TERM
	终端类型，只对连接到终端的unit设置(StandardInput=tty, StandardOutput=tty, or StandardError=tty)。请看termcap(5)
额外变量可能通过以下方法配置:对于进程衍生在特殊的units，使用Environment= and EnvironmentFile= 选项;对于特殊的全局变量，使用DefaultEnvironment=(请看systemd-system.conf(5))或内核选项systemd.setenv=(请看systemd(1))。额外的变量也可以通过PAM来设置，请看pam_env(8).

See Also

systemd(1), systemctl(1), journalctl(8), systemd.unit(5), systemd.service(5), systemd.socket(5), systemd.swap(5), systemd.mount(5), systemd.kill(5), systemd.resource-control(5), systemd.time(7), systemd.directives(7), tmpfiles.d(5), exec(3)










	
	
	
	
	
	
	
	
	
	
	